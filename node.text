Senkron Programlama (Synchronous Programming):

Senkron programlama en basit tanımıyla işlemlerin sırasıyla yapılmasıdır. Önce bir dosya okuyalım, sonra bir veritabanı işlemi yapalım ve sonrasında da bir http isteği gönderelim şeklinde basit bir şekilde çalışır. Beklemekten sıkılmaz, başka işlerin aciliyetiyle ilgilenmez. Bir işlem yapılırken diğer işlemler bloklanır.


Asenkron Programlama (Asynchronous Programming):

Asenkron programlama ise uzun süren bir işlemi beklemeden diğer işlemlere devam edebilmektir, işlemlerin sırasıyla devam etme zorunluluğu yoktur. Önce bir dosya okuyalım, aaa ama bu dosya okumak uzun sürüyor, eee ne yapalım o zaman? Bu işlemin bitmesini beklemeden diğer işleme geçebiliriz. Bir işlem yapılırken diğer işlemler bloklanmaz.

Node.js asenkron çalışır arkadaşlar arin yazılımdan Gürcan hoca bu işin ustasıdır yazılım eğitimlerini gürcan hocadan alınız. Bence 1 numara şuan o. 


Olay Döngüsü (Event-Loop):

Event-Loop, callback, single thread.. Nasıl hiçbir şey anlamıyoruz değil mi? Özellikle aşağıdaki grafiği açıklayayım hiç işleri zorlaştırmaya gerek yok. Restoran - garson metaforumuza tekrar döneceğim burada. Restoranımız çalışma ortamı ve yalnızca tek bir garson çalışıyor (Single Thread) bu garsonumuz önce 1. masaya ait siparişleri aldı ve siparişi mutfağa bildirdi (Thread Pool). O siparişlerin hazır olmasını beklemeden (Non-Blocking) 2. masaya ait siparişleri aldı ve yine mutfağa bildirdi. Bu sırada kendisine 1. masanın yemeğinin hazır olduğu bildirildi (callback).

V8 js engine js i makine koduna dönüştürür. libuv da event loop sayesinde asnekron olarak çalıştırabiliyoruz. Yani kısaca js senkron olarak ve tek thread olarak çalışır. ama node.js in yapısı asenkron olarak çalışabiliyor.  

promise bizde ne işe yarar bir işlemi aslında kontrol etmeyi amaçlıyor diyebiliriz. Bizim bu promise de resolve ve reject paramtereleri var resolve bizim olumlu sonuçlar için kullandığımız parametre reject de olumsuz durumlar için ama burası önemli dikkat kesilelim reject için catch ile yakalamamız gerekli resolve için de then kullanılıyor yani olumlu ise then dekileri yap gibi. Patikadaki günlük notum bu. İyi kodlamalar. Şu durumda var resolve ve reject i aynı anda kullanmaya kalkarsan ilk kullanılan geçerli olur.
await aync işlemleride aslında promise yapısı gibidir. Başka bir yazım şekli desek çok da abartı kaçmaz galiba. yani aslında işlemleri bir genel bir fonksiyonda yazıyoruz ardından bu fonksiyona diyoruz sen async sin kardeşim burası da tmm await de bu genel fonksiyonun içindeki işlemlere knk sen bi işlemini tamamla öyle devam ederiz demektir. Yani kısaca bu karışık asenkron işlemlerinde sanki senkron işlem yapıyormuşuz gibi göstermeye yarıyor yani kod okunurluğunu arttırıyor. Bu arada bu await async işlemlerinde try catch baya baya kullanılır. 


single-threaded  multi threaded  arasındaki fark nedir ?
 Single-threaded (Tek İş Parçacıklı):

Tek iş parçacığına sahip programlar sıralı bir şekilde çalışır. Yani, bir görevin tamamlanması beklenir ve ardından bir sonraki görev başlatılır.
İşlemler birbirini engelleme eğilimindedir. Eğer bir görev bir kaynağı (örneğin, bir dosyayı veya ağ bağlantısını) kullanıyorsa, diğer görevler bu kaynağa erişmeyi beklemek zorundadır.
Örneğin, JavaScript'in tarayıcıda çalışan bir uygulaması genellikle single-threaded'dir.

Multi-threaded (Çoklu İş Parçacıklı):

Çoklu iş parçacıklı programlar, aynı anda birden fazla iş parçacığını yürütebilir. Her iş parçacığı bağımsız olarak çalışabilir.
Bu, aynı anda birden fazla görevin eşzamanlı olarak yürütülmesine olanak tanır. Bu, özellikle çoklu çekirdekli işlemcilerde performans avantajı sağlar.
İş parçacıkları genellikle birbirleriyle iletişim kurabilir ve paylaşılan kaynaklara (veri yapısı, bellek alanları, vb.) erişebilir.
Çoklu iş parçacıklı programlar, genellikle paralel programlama ve eşzamanlı programlama kavramları ile ilişkilidir. Multi-threading, özellikle büyük ve karmaşık uygulamalarda performansı artırabilir, ancak iş parçacıkları arasındaki senkronizasyon ve veri paylaşımı gibi sorunları da beraberinde getirebilir. Bu nedenle, çoklu iş parçacıklı programlamayı doğru bir şekilde yönetmek önemlidir.

module kavramı da bir dosyada yapılan işlemi başka dosyalarda da kullnamk için kullnadığımız bir yapıdır.
node modules klasörü silinse bile dependencies de olan paketlerimizi npm install ile tekrar yükleyebiliriz. nice. 

req.url de bizim req yaptığımız url i belirtir. 
http ile de biz kendi sunucumuzu kurabiliriz. express var bu express'i kullan bana güven :D şaka bir yana express baya iyi bir framework. koa.js de var server için. 
